// Generated by CoffeeScript 1.9.1
var CONSTANTS, americano, async, config, cozydb, errorHandler, initializeAccountRefresh, initializeSocketHandler, log, path;

path = require('path');

americano = require('americano');

log = require('./utils/logging')({
  prefix: 'config'
});

CONSTANTS = require('./utils/constants');

async = require('async');

cozydb = require('cozydb');

errorHandler = require('./utils/errors').errorHandler;

initializeSocketHandler = function(app, server, callback) {
  var SocketHandler;
  SocketHandler = require('./utils/socket_handler');
  SocketHandler.setup(app, server);
  return callback(null);
};

initializeAccountRefresh = function(callback) {
  var Account, limitByBox, onlyFavorites;
  Account = require('./models/account');
  if (process.env.NODE_ENV === 'production') {
    limitByBox = null;
    onlyFavorites = false;
  } else {
    limitByBox = CONSTANTS.LIMIT_BY_BOX;
    onlyFavorites = true;
  }
  return Account.removeOrphansAndRefresh(limitByBox, onlyFavorites, function() {
    log.info("initial refresh completed");
    return callback(null);
  });
};

config = {
  common: {
    set: {
      'view engine': 'jade',
      'views': path.resolve(__dirname, 'views')
    },
    use: [
      americano.bodyParser(), americano.methodOverride(), americano["static"](__dirname + '/../client/public', {
        maxAge: 86400000
      })
    ],
    useAfter: [errorHandler],
    afterStart: function(app, server) {
      return async.series([
        function(cb) {
          return cozydb.forceReindexing(cb);
        }, function(cb) {
          return initializeSocketHandler(app, server, cb);
        }, function(cb) {
          return initializeAccountRefresh(cb);
        }
      ], function(err) {
        return log.info("Initialization complete");
      });
    }
  },
  development: [americano.logger('dev')],
  production: [americano.logger('short')],
  plugins: ['cozydb']
};

module.exports = config;
