// Generated by CoffeeScript 1.10.0
var Contact, async, cozydb, log, stream, stream_to_buffer_array,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

cozydb = require('cozydb');

async = require('async');

stream_to_buffer_array = require('../utils/stream_to_array');

log = require('../utils/logging')({
  prefix: 'models:contact'
});

stream = require('stream');

module.exports = Contact = (function(superClass) {
  extend(Contact, superClass);

  function Contact() {
    return Contact.__super__.constructor.apply(this, arguments);
  }

  Contact.docType = 'contact';

  Contact.schema = {
    id: String,
    fn: String,
    n: String,
    datapoints: cozydb.NoSchema,
    note: String,
    tags: [String],
    revision: String,
    _attachments: Object
  };

  Contact.prototype.includePicture = function(callback) {
    var bufferer, chunks, pictureStream, ref;
    if (!((ref = this._attachments) != null ? ref.picture : void 0)) {
      return callback(null, this);
    }
    pictureStream = this.getFile('picture', (function(_this) {
      return function(err) {
        if (err != null) {
          return log.error("Contact " + _this.id + " getting picture", err);
        }
      };
    })(this));
    chunks = [];
    bufferer = new stream.Writable;
    bufferer._write = function(chunk, enc, next) {
      chunks.push(chunk);
      return next();
    };
    bufferer.end = (function(_this) {
      return function() {
        var avatar, base64;
        base64 = Buffer.concat(chunks).toString('base64');
        avatar = "data:image/jpeg;base64," + base64;
        if (_this.datapoints == null) {
          _this.datapoints = [];
        }
        _this.datapoints.push({
          name: 'avatar',
          value: avatar
        });
        return callback(null, _this);
      };
    })(this);
    return pictureStream.pipe(bufferer);
  };

  Contact.requestWithPictures = function(name, options, callback) {
    log.info("requestWithPictures");
    return Contact.request(name, options, function(err, contacts) {
      var out, outids;
      outids = [];
      out = [];
      if (contacts != null) {
        return async.eachSeries(contacts, function(contact, cb) {
          var ref;
          if (ref = contact.id, indexOf.call(outids, ref) >= 0) {
            return cb(null);
          }
          return contact.includePicture(function(err, contactWIthPicture) {
            if (err) {
              return cb(err);
            }
            outids.push(contact.id);
            out.push(contactWIthPicture);
            return cb(null);
          });
        }, function(err) {
          return callback(err, out);
        });
      } else {
        return callback(null, []);
      }
    });
  };

  Contact.list = function(callback) {
    return Contact.request('all', callback);
  };

  Contact.createNoDuplicate = function(data, callback) {
    var key;
    log.info("createNoDuplicate");
    key = data.address;
    return Contact.request('mailByEmail', {
      key: data.address
    }, function(err, existings) {
      var contact;
      if (err) {
        return callback(err);
      }
      if ((existings != null ? existings.length : void 0) > 0) {
        return callback(null, existings);
      }
      contact = {
        fn: data.name,
        datapoints: [
          {
            name: "email",
            value: data.address
          }
        ]
      };
      return Contact.create(contact, function(err, created) {
        if (err) {
          return callback(err);
        }
        return Contact.request('mailByEmail', {
          key: key
        }, callback);
      });
    });
  };

  return Contact;

})(cozydb.CozyModel);
