// Generated by CoffeeScript 1.9.0
var BadRequest, Contact, ContactActivity, NotFound, async, includePictures, log, _ref;

Contact = require('../models/contact');

async = require('async');

log = require('../utils/logging')({
  prefix: 'controllers:activity'
});

_ref = require('../utils/errors'), BadRequest = _ref.BadRequest, NotFound = _ref.NotFound;

includePictures = function(contacts, callback) {
  return async.eachSeries(contacts, function(contact, cb) {
    var bufs, stream, _ref1;
    if ((_ref1 = contact._attachments) != null ? _ref1.picture : void 0) {
      stream = contact.getFile('picture', function(err) {
        if (err != null) {
          return log.error(err);
        }
      });
      bufs = [];
      stream.on('data', function(d) {
        return bufs.push(d);
      });
      return stream.on('end', function() {
        var avatar, buf;
        buf = Buffer.concat(bufs);
        avatar = "data:image/jpeg;base64," + buf.toString('base64');
        contact.datapoints.push({
          name: 'avatar',
          value: avatar
        });
        return cb(null, contact);
      });
    } else {
      return cb(null, contact);
    }
  }, callback);
};

ContactActivity = {
  search: function(data, callback) {
    var params, request;
    if (data.query != null) {
      request = 'mailByName';
      params = {
        startkey: data.query,
        endkey: data.query + "\uFFFF"
      };
    } else {
      request = 'all';
      params = {};
    }
    return Contact.requestWithPictures(request, params, callback);
  },
  create: function(data, callback) {
    var _ref1;
    if (((_ref1 = data.contact) != null ? _ref1.address : void 0) != null) {
      return Contact.createNoDuplicate(data.contact, callback);
    } else {
      return callback(new BadRequest('BAD FORMAT'));
    }
  },
  "delete": function(data, callback) {
    return Contact.find(data.id, function(err, contact) {
      if (err) {
        return callback(err);
      }
      if (!contact) {
        return callback(new NotFound("CONTACT " + data.id));
      }
      return contact.destroy(callback);
    });
  }
};

module.exports.create = function(req, res, next) {
  var activity, _ref1;
  activity = req.body;
  switch (activity.data.type) {
    case 'contact':
      if (ContactActivity[activity.name] != null) {
        return ContactActivity[activity.name](activity.data, function(err, result) {
          if (err != null) {
            return res.status(400).send({
              name: err.message,
              error: true
            });
          } else {
            return res.send({
              result: result
            });
          }
        });
      } else {
        return res.status(400).send({
          name: "Unknown activity name",
          error: true
        });
      }
      break;
    case 'error':
      log.error(activity.data);
      log.error((_ref1 = activity.data.error) != null ? _ref1.stack : void 0);
      return res.send(null);
    default:
      return res.status(400).send({
        name: "Unknown activity data type",
        error: true
      });
  }
};
