// Generated by CoffeeScript 1.10.0
var Account, AccountConfigError, Mailbox, MailboxRefresh, MailboxRefreshList, Scheduler, _, async, log, notifications, patchConversation, ramStore;

_ = require('lodash');

Account = require('../models/account');

Mailbox = require('../models/mailbox');

AccountConfigError = require('../utils/errors').AccountConfigError;

log = require('../utils/logging')({
  prefix: 'accounts:controller'
});

async = require('async');

notifications = require('../utils/notifications');

ramStore = require('../models/store_account_and_boxes');

Scheduler = require('../processes/_scheduler');

MailboxRefreshList = require('../processes/mailbox_refresh_list');

MailboxRefresh = require('../processes/mailbox_refresh');

patchConversation = require('../patchs/conversation');

module.exports.create = function(req, res, next) {
  var account;
  account = new Account(_.pick(req.body, Account.saveFields));
  return async.series([
    function(cb) {
      log.debug("create#testConnections");
      return account.testConnections(cb);
    }, function(cb) {
      log.debug("create#cozy");
      return Account.create(account, function(err, created) {
        if (err) {
          return cb(err);
        }
        account = created;
        return cb(null);
      });
    }, function(cb) {
      var refreshList;
      refreshList = new MailboxRefreshList({
        account: account
      });
      return Scheduler.schedule(refreshList, Scheduler.ASAP, cb);
    }, function(cb) {
      var boxes, changes;
      boxes = ramStore.getMailboxesByAccount(account.id);
      changes = Mailbox.scanBoxesForSpecialUse(boxes);
      changes.initialized = true;
      return account.updateAttributes(changes, cb);
    }
  ], function(err) {
    var allBoxes, favoriteBoxes;
    if (err) {
      return next(err);
    }
    res.send(ramStore.getAccountClientObject(account.id));
    favoriteBoxes = ramStore.getFavoriteMailboxesByAccount(account.id);
    allBoxes = ramStore.getMailboxesByAccount(account.id);
    return async.series([
      function(cb) {
        var refreshes;
        refreshes = favoriteBoxes.map(function(mailbox) {
          return new MailboxRefresh({
            mailbox: mailbox,
            limitByBox: 100
          });
        });
        return Scheduler.scheduleMultiple(refreshes, cb);
      }, function(cb) {
        var refreshes;
        refreshes = allBoxes.map(function(mailbox) {
          return new MailboxRefresh({
            mailbox: mailbox,
            storeHighestModSeq: true
          });
        });
        return Scheduler.scheduleMultiple(refreshes, cb);
      }, function(cb) {
        return patchConversation.patchOneAccount(account, cb);
      }
    ], function(err) {
      if (err) {
        log.error(err);
      }
      return log.info("Account " + (account != null ? account.label : void 0) + " import complete");
    });
  });
};

module.exports.check = function(req, res, next) {
  var tmpAccount;
  if (req.body.imapLogin) {
    req.body.login = req.body.imapLogin;
  }
  tmpAccount = new Account(_.pick(req.body, Account.saveFields));
  return tmpAccount.testConnections(function(err) {
    if (err) {
      return next(err);
    }
    return res.send({
      check: 'ok'
    });
  });
};

module.exports.edit = function(req, res, next) {
  var accountInstance, changes, updated;
  accountInstance = ramStore.getAccount(req.params.accountID);
  changes = _.pick(req.body, Account.saveFields);
  updated = new Account(changes);
  if (!(updated.password && updated.password !== '')) {
    updated.password = accountInstance.password;
  }
  return updated.testConnections(function(err) {
    if (err) {
      return next(err);
    }
    return accountInstance.updateAttributes(changes, function(err, updated) {
      if (err) {
        return next(err);
      }
      return res.send(ramStore.getAccountClientObject(accountInstance.id));
    });
  });
};

module.exports.remove = function(req, res, next) {
  var accountInstance;
  accountInstance = ramStore.getAccount(req.params.accountID);
  return accountInstance.destroy(function(err) {
    if (err) {
      return next(err);
    }
    Scheduler.orphanRemovalDebounced();
    return res.status(204).end();
  });
};
