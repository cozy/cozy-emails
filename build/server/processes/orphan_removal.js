// Generated by CoffeeScript 1.10.0
var Mailbox, Message, OrphanRemoval, Process, RemoveAllMessagesFromMailbox, async, log, ramStore, safeLoop,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ramStore = require('../models/store_account_and_boxes');

Message = require('../models/message');

Mailbox = require('../models/mailbox');

safeLoop = require('../utils/safeloop');

Process = require('./_base');

RemoveAllMessagesFromMailbox = require('./message_remove_by_mailbox');

log = require('../utils/logging')('process:removeorphans');

async = require('async');

module.exports = OrphanRemoval = (function(superClass) {
  extend(OrphanRemoval, superClass);

  function OrphanRemoval() {
    this.removeOrphansMessageFromMailboxes = bind(this.removeOrphansMessageFromMailboxes, this);
    this.getOrphanMessageMailboxesIDs = bind(this.getOrphanMessageMailboxesIDs, this);
    return OrphanRemoval.__super__.constructor.apply(this, arguments);
  }

  OrphanRemoval.prototype.code = 'orphan-removal';

  OrphanRemoval.prototype.initialize = function(options, callback) {
    return async.series([this.removeMailboxOrphans, this.forgetDestroyedBoxes, this.getOrphanMessageMailboxesIDs, this.removeOrphansMessageFromMailboxes, this.destroyNoBoxMessages], callback);
  };

  OrphanRemoval.prototype.removeMailboxOrphans = function(callback) {
    log.debug("removeOrphans");
    return safeLoop(ramStore.getOrphanBoxes(), function(box, next) {
      return box.destroy(next);
    }, function(errors) {
      var err, i, len;
      for (i = 0, len = errors.length; i < len; i++) {
        err = errors[i];
        if (-1 === err.message.indexOf('not found')) {
          log.error('failed to delete box', err);
        }
      }
      return callback(null);
    });
  };

  OrphanRemoval.prototype.forgetDestroyedBoxes = function(callback) {
    var account, boxid, i, j, len, len1, ref, ref1, toForget;
    toForget = [];
    ref = ramStore.getAllAccounts();
    for (i = 0, len = ref.length; i < len; i++) {
      account = ref[i];
      ref1 = account.getReferencedBoxes();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        boxid = ref1[j];
        if (!ramStore.getMailbox(boxid)) {
          toForget.push({
            account: account,
            boxid: boxid
          });
        }
      }
    }
    return safeLoop(toForget, function(arg, next) {
      var account, boxid;
      account = arg.account, boxid = arg.boxid;
      return account.forgetBox(boxid, next);
    }, function(errors) {
      var err, k, len2;
      for (k = 0, len2 = errors.length; k < len2; k++) {
        err = errors[k];
        log.error("failed to forget box", err);
      }
      return callback(null);
    });
  };

  OrphanRemoval.prototype.getOrphanMessageMailboxesIDs = function(callback) {
    return Message.rawRequest('byMailboxRequest', {
      reduce: true,
      group_level: 2,
      startkey: ['uid', ''],
      endkey: ['uid', "\uFFFF"]
    }, (function(_this) {
      return function(err, rows) {
        var existingMailboxes, mailboxIDs;
        if (err) {
          return callback(err);
        }
        mailboxIDs = rows.map(function(row) {
          return row.key[1];
        });
        existingMailboxes = ramStore.getMailboxesID();
        _this.toDestroyMailboxIDs = mailboxIDs.filter(function(id) {
          return indexOf.call(existingMailboxes, id) < 0;
        });
        return callback(null);
      };
    })(this));
  };

  OrphanRemoval.prototype.removeOrphansMessageFromMailboxes = function(callback) {
    return safeLoop(this.toDestroyMailboxIDs, (function(_this) {
      return function(mailboxID, next) {
        var options, removal;
        log.debug("removeOrphans - found orphan from box", mailboxID);
        options = {
          mailboxID: mailboxID,
          toDestroyMailboxIDs: _this.toDestroyMailboxIDs
        };
        removal = new RemoveAllMessagesFromMailbox(options);
        return removal.run(next);
      };
    })(this), function(errors) {
      var err, i, len;
      for (i = 0, len = errors.length; i < len; i++) {
        err = errors[i];
        log.error("failed to remove message", err);
      }
      return callback(null);
    });
  };

  OrphanRemoval.prototype.destroyNoBoxMessages = function(callback) {
    var options;
    options = {
      key: ['nobox'],
      reduce: false
    };
    return Message.rawRequest('byMailboxRequest', options, function(err, rows) {
      if (err) {
        return callback(err);
      }
      return safeLoop(rows, function(row, next) {
        return Message.destroy(row.id, next);
      }, function(errors) {
        var i, len;
        for (i = 0, len = errors.length; i < len; i++) {
          err = errors[i];
          log.error('fail to destroy orphan msg', err);
        }
        return callback(null);
      });
    });
  };

  return OrphanRemoval;

})(Process);
