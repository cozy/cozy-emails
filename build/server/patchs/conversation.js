// Generated by CoffeeScript 1.10.0
var Message, PATCH_BATCH_SIZE, applyPatchConversationStep, async, log, patchConversationOne, ramStore;

Message = require('../models/message');

async = require('async');

ramStore = require('../models/store_account_and_boxes');

log = require('../utils/logging')({
  prefix: 'patch:conversation'
});

PATCH_BATCH_SIZE = 10000;

exports.patchAllAccounts = function(callback) {
  var accounts;
  accounts = ramStore.getAllAccounts();
  return async.eachSeries(accounts, exports.patchOneAccount, callback);
};

exports.patchOneAccount = function(account, callback) {
  var status;
  log.debug("applyPatchConversation");
  status = {
    skip: 0
  };
  return async.whilst((function() {
    return !status.complete;
  }), function(cb) {
    return applyPatchConversationStep(account, status, cb);
  }, callback);
};

applyPatchConversationStep = function(account, status, next) {
  return Message.rawRequest('conversationPatching', {
    reduce: true,
    group_level: 2,
    startkey: [account.id],
    endkey: [account.id, {}],
    limit: PATCH_BATCH_SIZE,
    skip: status.skip
  }, function(err, rows) {
    var problems;
    if (err) {
      return next(err);
    }
    if (rows.length === 0) {
      status.complete = true;
      return next(null);
    }
    problems = rows.filter(function(row) {
      return row.value !== null;
    }).map(function(row) {
      return row.key;
    });
    log.debug("conversationPatchingStep", status.skip, rows.length, problems.length);
    if (problems.length === 0) {
      status.skip += PATCH_BATCH_SIZE;
      return next(null);
    } else {
      return async.eachSeries(problems, patchConversationOne, function(err) {
        if (err) {
          return next(err);
        }
        status.skip += PATCH_BATCH_SIZE;
        return next(null);
      });
    }
  });
};

patchConversationOne = function(key, callback) {
  return Message.rawRequest('conversationPatching', {
    reduce: false,
    key: key
  }, function(err, rows) {
    if (err) {
      return callback(err);
    }
    return Message.pickConversationID(rows, callback);
  });
};
