// Generated by CoffeeScript 1.10.0
var Bufferer, stream, stream_to_buffer_array,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

stream = require('stream');

module.exports = stream_to_buffer_array = function(stream, cb) {
  var parts;
  parts = [];
  stream.on('error', function(err) {
    return cb(err);
  });
  stream.on('data', function(d) {
    return parts.push(d);
  });
  return stream.on('end', function() {
    return cb(null, parts);
  });
};

module.exports.Bufferer = Bufferer = (function(superClass) {
  extend(Bufferer, superClass);

  function Bufferer(onDone) {
    this.end = bind(this.end, this);
    this._write = bind(this._write, this);
    Bufferer.__super__.constructor.apply(this, arguments);
    this.chunks = [];
    this.onDone = onDone;
  }

  Bufferer.prototype._write = function(chunk, enc, next) {
    this.chunks.push(chunk);
    return next();
  };

  Bufferer.prototype.end = function() {
    return this.onDone(null, Buffer.concat(this.chunks));
  };

  return Bufferer;

})(stream.Writable);
